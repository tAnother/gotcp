



Internet Engineering Task Force (IETF)                      W. Eddy, Ed.
STD: 7                                                       MTI Systems
Request for Comments: 9293                                   August 2022
Obsoletes: 793, 879, 2873, 6093, 6429, 6528,                            
           6691                                                         
Updates: 1011, 1122, 5961                                               
Category: Standards Track                                               
ISSN: 2070-1721


                  Transmission Control Protocol (TCP)

Abstract

   This document specifies the Transmission Control Protocol (TCP).  TCP
   is an important transport-layer protocol in the Internet protocol
   stack, and it has continuously evolved over decades of use and growth
   of the Internet.  Over this time, a number of changes have been made
   to TCP as it was specified in RFC 793, though these have only been
   documented in a piecemeal fashion.  This document collects and brings
   those changes together with the protocol specification from RFC 793.
   This document obsoletes RFC 793, as well as RFCs 879, 2873, 6093,
   6429, 6528, and 6691 that updated parts of RFC 793.  It updates RFCs
   1011 and 1122, and it should be considered as a replacement for the
   portions of those documents dealing with TCP requirements.  It also
   updates RFC 5961 by adding a small clarification in reset handling
   while in the SYN-RECEIVED state.  The TCP header control bits from
   RFC 793 have also been updated based on RFC 3168.

Status of This Memo

   This is an Internet Standards Track document.

   This document is a product of the Internet Engineering Task Force
   (IETF).  It represents the consensus of the IETF community.  It has
   received public review and has been approved for publication by the
   Internet Engineering Steering Group (IESG).  Further information on
   Internet Standards is available in Section 2 of RFC 7841.

   Information about the current status of this document, any errata,
   and how to provide feedback on it may be obtained at
   https://www.rfc-editor.org/info/rfc9293.

Copyright Notice

   Copyright (c) 2022 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Revised BSD License text as described in Section 4.e of the
   Trust Legal Provisions and are provided without warranty as described
   in the Revised BSD License.

   This document may contain material from IETF Documents or IETF
   Contributions published or made publicly available before November
   10, 2008.  The person(s) controlling the copyright in some of this
   material may not have granted the IETF Trust the right to allow
   modifications of such material outside the IETF Standards Process.
   Without obtaining an adequate license from the person(s) controlling
   the copyright in such materials, this document may not be modified
   outside the IETF Standards Process, and derivative works of it may
   not be created outside the IETF Standards Process, except to format
   it for publication as an RFC or to translate it into languages other
   than English.

Table of Contents

   1.  Purpose and Scope
   2.  Introduction
     2.1.  Requirements Language
     2.2.  Key TCP Concepts
   3.  Functional Specification
     3.1.  Header Format
     3.2.  Specific Option Definitions
       3.2.1.  Other Common Options
       3.2.2.  Experimental TCP Options
     3.3.  TCP Terminology Overview
       3.3.1.  Key Connection State Variables
       3.3.2.  State Machine Overview
     3.4.  Sequence Numbers
       3.4.1.  Initial Sequence Number Selection
       3.4.2.  Knowing When to Keep Quiet
       3.4.3.  The TCP Quiet Time Concept
     3.5.  Establishing a Connection
       3.5.1.  Half-Open Connections and Other Anomalies
       3.5.2.  Reset Generation
       3.5.3.  Reset Processing
     3.6.  Closing a Connection
       3.6.1.  Half-Closed Connections
     3.7.  Segmentation
       3.7.1.  Maximum Segment Size Option
       3.7.2.  Path MTU Discovery
       3.7.3.  Interfaces with Variable MTU Values
       3.7.4.  Nagle Algorithm
       3.7.5.  IPv6 Jumbograms
     3.8.  Data Communication
       3.8.1.  Retransmission Timeout
       3.8.2.  TCP Congestion Control
       3.8.3.  TCP Connection Failures
       3.8.4.  TCP Keep-Alives
       3.8.5.  The Communication of Urgent Information
       3.8.6.  Managing the Window
     3.9.  Interfaces
       3.9.1.  User/TCP Interface
       3.9.2.  TCP/Lower-Level Interface
     3.10. Event Processing
       3.10.1.  OPEN Call
       3.10.2.  SEND Call
       3.10.3.  RECEIVE Call
       3.10.4.  CLOSE Call
       3.10.5.  ABORT Call
       3.10.6.  STATUS Call
       3.10.7.  SEGMENT ARRIVES
       3.10.8.  Timeouts
   4.  Glossary
   5.  Changes from RFC 793
   6.  IANA Considerations
   7.  Security and Privacy Considerations
   8.  References
     8.1.  Normative References
     8.2.  Informative References
   Appendix A.  Other Implementation Notes
     A.1.  IP Security Compartment and Precedence
       A.1.1.  Precedence
       A.1.2.  MLS Systems
     A.2.  Sequence Number Validation
     A.3.  Nagle Modification
     A.4.  Low Watermark Settings
   Appendix B.  TCP Requirement Summary
   Acknowledgments
   Author's Address

1.  Purpose and Scope

   In 1981, RFC 793 [16] was released, documenting the Transmission
   Control Protocol (TCP) and replacing earlier published specifications
   for TCP.

   Since then, TCP has been widely implemented, and it has been used as
   a transport protocol for numerous applications on the Internet.

   For several decades, RFC 793 plus a number of other documents have
   combined to serve as the core specification for TCP [49].  Over time,
   a number of errata have been filed against RFC 793.  There have also
   been deficiencies found and resolved in security, performance, and
   many other aspects.  The number of enhancements has grown over time
   across many separate documents.  These were never accumulated
   together into a comprehensive update to the base specification.

   The purpose of this document is to bring together all of the IETF
   Standards Track changes and other clarifications that have been made
   to the base TCP functional specification (RFC 793) and to unify them
   into an updated version of the specification.

   Some companion documents are referenced for important algorithms that
   are used by TCP (e.g., for congestion control) but have not been
   completely included in this document.  This is a conscious choice, as
   this base specification can be used with multiple additional
   algorithms that are developed and incorporated separately.  This
   document focuses on the common basis that all TCP implementations
   must support in order to interoperate.  Since some additional TCP
   features have become quite complicated themselves (e.g., advanced
   loss recovery and congestion control), future companion documents may
   attempt to similarly bring these together.

   In addition to the protocol specification that describes the TCP
   segment format, generation, and processing rules that are to be
   implemented in code, RFC 793 and other updates also contain
   informative and descriptive text for readers to understand aspects of
   the protocol design and operation.  This document does not attempt to
   alter or update this informative text and is focused only on updating
   the normative protocol specification.  This document preserves
   references to the documentation containing the important explanations
   and rationale, where appropriate.

   This document is intended to be useful both in checking existing TCP
   implementations for conformance purposes, as well as in writing new
   implementations.

2.  Introduction

   RFC 793 contains a discussion of the TCP design goals and provides
   examples of its operation, including examples of connection
   establishment, connection termination, and packet retransmission to
   repair losses.

   This document describes the basic functionality expected in modern
   TCP implementations and replaces the protocol specification in RFC
   793.  It does not replicate or attempt to update the introduction and
   philosophy content in Sections 1 and 2 of RFC 793.  Other documents
   are referenced to provide explanations of the theory of operation,
   rationale, and detailed discussion of design decisions.  This
   document only focuses on the normative behavior of the protocol.

   The "TCP Roadmap" [49] provides a more extensive guide to the RFCs
   that define TCP and describe various important algorithms.  The TCP
   Roadmap contains sections on strongly encouraged enhancements that
   improve performance and other aspects of TCP beyond the basic
   operation specified in this document.  As one example, implementing
   congestion control (e.g., [8]) is a TCP requirement, but it is a
   complex topic on its own and not described in detail in this
   document, as there are many options and possibilities that do not
   impact basic interoperability.  Similarly, most TCP implementations
   today include the high-performance extensions in [47], but these are
   not strictly required or discussed in this document.  Multipath
   considerations for TCP are also specified separately in [59].

   A list of changes from RFC 793 is contained in Section 5.

2.1.  Requirements Language

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [3] [12] when, and only when, they appear in all capitals, as
   shown here.

   Each use of RFC 2119 keywords in the document is individually labeled
   and referenced in Appendix B, which summarizes implementation
   requirements.

   Sentences using "MUST" are labeled as "MUST-X" with X being a numeric
   identifier enabling the requirement to be located easily when
   referenced from Appendix B.

   Similarly, sentences using "SHOULD" are labeled with "SHLD-X", "MAY"
   with "MAY-X", and "RECOMMENDED" with "REC-X".

   For the purposes of this labeling, "SHOULD NOT" and "MUST NOT" are
   labeled the same as "SHOULD" and "MUST" instances.

2.2.  Key TCP Concepts

   TCP provides a reliable, in-order, byte-stream service to
   applications.

   The application byte-stream is conveyed over the network via TCP
   segments, with each TCP segment sent as an Internet Protocol (IP)
   datagram.

   TCP reliability consists of detecting packet losses (via sequence
   numbers) and errors (via per-segment checksums), as well as
   correction via retransmission.

   TCP supports unicast delivery of data.  There are anycast
   applications that can successfully use TCP without modifications,
   though there is some risk of instability due to changes of lower-
   layer forwarding behavior [46].

   TCP is connection oriented, though it does not inherently include a
   liveness detection capability.

   Data flow is supported bidirectionally over TCP connections, though
   applications are free to send data only unidirectionally, if they so
   choose.

   TCP uses port numbers to identify application services and to
   multiplex distinct flows between hosts.

   A more detailed description of TCP features compared to other
   transport protocols can be found in Section 3.1 of [52].  Further
   description of the motivations for developing TCP and its role in the
   Internet protocol stack can be found in Section 2 of [16] and earlier
   versions of the TCP specification.

3.  Functional Specification

3.1.  Header Format

   TCP segments are sent as internet datagrams.  The Internet Protocol
   (IP) header carries several information fields, including the source
   and destination host addresses [1] [13].  A TCP header follows the IP
   headers, supplying information specific to TCP.  This division allows
   for the existence of host-level protocols other than TCP.  In the
   early development of the Internet suite of protocols, the IP header
   fields had been a part of TCP.

   This document describes TCP, which uses TCP headers.

   A TCP header, followed by any user data in the segment, is formatted
   as follows, using the style from [66]:

       0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |          Source Port          |       Destination Port        |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                        Sequence Number                        |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                    Acknowledgment Number                      |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |  Data |       |C|E|U|A|P|R|S|F|                               |
      | Offset| Rsrvd |W|C|R|C|S|S|Y|I|            Window             |
      |       |       |R|E|G|K|H|T|N|N|                               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |           Checksum            |         Urgent Pointer        |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                           [Options]                           |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                                                               :
      :                             Data                              :
      :                                                               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

             Note that one tick mark represents one bit position.

                        Figure 1: TCP Header Format

   where:

   Source Port:  16 bits

     The source port number.

   Destination Port:  16 bits

     The destination port number.

   Sequence Number:  32 bits

     The sequence number of the first data octet in this segment (except
     when the SYN flag is set).  If SYN is set, the sequence number is
     the initial sequence number (ISN) and the first data octet is
     ISN+1.

   Acknowledgment Number:  32 bits

     If the ACK control bit is set, this field contains the value of the
     next sequence number the sender of the segment is expecting to
     receive.  Once a connection is established, this is always sent.

   Data Offset (DOffset):  4 bits

     The number of 32-bit words in the TCP header.  This indicates where
     the data begins.  The TCP header (even one including options) is an
     integer multiple of 32 bits long.

   Reserved (Rsrvd):  4 bits

     A set of control bits reserved for future use.  Must be zero in
     generated segments and must be ignored in received segments if the
     corresponding future features are not implemented by the sending or
     receiving host.

   Control bits:  The control bits are also known as "flags".
     Assignment is managed by IANA from the "TCP Header Flags" registry
     [62].  The currently assigned control bits are CWR, ECE, URG, ACK,
     PSH, RST, SYN, and FIN.

     CWR:  1 bit

         Congestion Window Reduced (see [6]).

     ECE:  1 bit

         ECN-Echo (see [6]).

     URG:  1 bit

         Urgent pointer field is significant.

     ACK:  1 bit

         Acknowledgment field is significant.

     PSH:  1 bit

         Push function (see the Send Call description in Section 3.9.1).

     RST:  1 bit

         Reset the connection.

     SYN:  1 bit

         Synchronize sequence numbers.

     FIN:  1 bit

         No more data from sender.

   Window:  16 bits

     The number of data octets beginning with the one indicated in the
     acknowledgment field that the sender of this segment is willing to
     accept.  The value is shifted when the window scaling extension is
     used [47].

     The window size MUST be treated as an unsigned number, or else
     large window sizes will appear like negative windows and TCP will
     not work (MUST-1).  It is RECOMMENDED that implementations will
     reserve 32-bit fields for the send and receive window sizes in the
     connection record and do all window computations with 32 bits (REC-
     1).

   Checksum:  16 bits

     The checksum field is the 16-bit ones' complement of the ones'
     complement sum of all 16-bit words in the header and text.  The
     checksum computation needs to ensure the 16-bit alignment of the
     data being summed.  If a segment contains an odd number of header
     and text octets, alignment can be achieved by padding the last
     octet with zeros on its right to form a 16-bit word for checksum
     purposes.  The pad is not transmitted as part of the segment.
     While computing the checksum, the checksum field itself is replaced
     with zeros.

     The checksum also covers a pseudo-header (Figure 2) conceptually
     prefixed to the TCP header.  The pseudo-header is 96 bits for IPv4
     and 320 bits for IPv6.  Including the pseudo-header in the checksum
     gives the TCP connection protection against misrouted segments.
     This information is carried in IP headers and is transferred across
     the TCP/network interface in the arguments or results of calls by
     the TCP implementation on the IP layer.

                     +--------+--------+--------+--------+
                     |           Source Address          |
                     +--------+--------+--------+--------+
                     |         Destination Address       |
                     +--------+--------+--------+--------+
                     |  zero  |  PTCL  |    TCP Length   |
                     +--------+--------+--------+--------+

                         Figure 2: IPv4 Pseudo-header

     Pseudo-header components for IPv4:
       Source Address:  the IPv4 source address in network byte order

       Destination Address:  the IPv4 destination address in network
          byte order

       zero:  bits set to zero

       PTCL:  the protocol number from the IP header

       TCP Length:  the TCP header length plus the data length in octets
          (this is not an explicitly transmitted quantity but is
          computed), and it does not count the 12 octets of the pseudo-
          header.

     For IPv6, the pseudo-header is defined in Section 8.1 of RFC 8200
     [13] and contains the IPv6 Source Address and Destination Address,
     an Upper-Layer Packet Length (a 32-bit value otherwise equivalent
     to TCP Length in the IPv4 pseudo-header), three bytes of zero
     padding, and a Next Header value, which differs from the IPv6
     header value if there are extension headers present between IPv6
     and TCP.

     The TCP checksum is never optional.  The sender MUST generate it
     (MUST-2) and the receiver MUST check it (MUST-3).

   Urgent Pointer:  16 bits

     This field communicates the current value of the urgent pointer as
     a positive offset from the sequence number in this segment.  The
     urgent pointer points to the sequence number of the octet following
     the urgent data.  This field is only to be interpreted in segments
     with the URG control bit set.

   Options:  [TCP Option]; size(Options) == (DOffset-5)*32; present only
     when DOffset > 5.  Note that this size expression also includes any
     padding trailing the actual options present.

     Options may occupy space at the end of the TCP header and are a
     multiple of 8 bits in length.  All options are included in the
     checksum.  An option may begin on any octet boundary.  There are
     two cases for the format of an option:

     Case 1:  A single octet of option-kind.

     Case 2:  An octet of option-kind (Kind), an octet of option-length,
        and the actual option-data octets.
